[[server]]
name = "k-120"
[server.config]
address = "https://10.203.1.120:8120"
region = "CL"
enabled = true
passkey = "yt0u6axd1rNY7EO13254WF9J38683gBe"

##

[[server]]
name = "k-121"
[server.config]
address = "https://10.203.1.120:8120"
region = "CL"
enabled = true

##

[[server]]
name = "komodo1"
[server.config]
address = "https://host.docker.internal:8120"
region = "HL"
enabled = true

##

[[server]]
name = "komodo2"
[server.config]
address = "https://10.10.10.31:8120"
region = "HL"
enabled = true
passkey = "i4FnpPizwNFTpw7yc5HeAX8wFm5w9eXB"

##

[[server]]
name = "komodo3"
[server.config]
address = "https://10.10.10.32:8120"
region = "HL"
enabled = true
passkey = "22ajbb6BApjQZFf04wAbGe55MwMl5dkL"

##

[[server]]
name = "pangolin"
[server.config]
address = "https://45.127.32.141:8120"
enabled = true

##

[[stack]]
name = "newt"
tags = ["komodo3"]
[stack.config]
server = "komodo3"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
file_contents = """
services:
  newt:
    image: fosrl/newt
    container_name: newt
    restart: unless-stopped
    environment:
      - PANGOLIN_ENDPOINT=https://pangolin.d3adc3ii.cc
      - NEWT_ID=jazianb9pxf8f2k
      - NEWT_SECRET=vmfug29a5uhz7lm313x838k28rtu585xaf31y8jw7j70nejs
"""

##


[[stack]]
name = "authentik-70"
tags = ["core", "external"]
[stack.config]
server = "komodo1"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
file_contents = """
services:
  postgresql:
    env_file:
    - .env
    environment:
      POSTGRES_DB: ${PG_DB:-authentik}
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
      - CMD-SHELL
      - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      timeout: 5s
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    volumes:
    - database:/var/lib/postgresql/data
  redis:
    command: --save 60 1 --loglevel warning
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
      - CMD-SHELL
      - redis-cli ping | grep PONG
      timeout: 3s
    image: docker.io/library/redis:alpine
    restart: unless-stopped
    volumes:
    - redis:/data
  server:
    command: server
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
    - .env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8.0}
    ports:
    - ${COMPOSE_PORT_HTTP:-9000}:9000
    - ${COMPOSE_PORT_HTTPS:-9443}:9443
    restart: unless-stopped
    volumes:
    - ./media:/media
    - ./custom-templates:/templates
  worker:
    command: worker
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
    - .env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8.0}
    restart: unless-stopped
    user: root
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./media:/media
    - ./certs:/certs
    - ./custom-templates:/templates
  authentik_proxy:
    image: ghcr.io/goauthentik/proxy:2025.8.0
        # Optionally specify the container's network, which must be able to reach the core authentik server.
        # networks:
        #   - foo
    ports:
      - 9000:9000
      - 9443:9443
    environment:
      AUTHENTIK_HOST: http://10.10.10.70:8175
      AUTHENTIK_INSECURE: "true"
      AUTHENTIK_TOKEN: QAk1Uxn4iwSd1tiAEmDAVMTvgu46hyy3er847Rksh5yjUY1kZN4cigNyG1mn
            # Optional setting to be used when `authentik_host` for internal communication doesn't match the public URL.
      AUTHENTIK_HOST_BROWSER: https://auth.d3adc3ii.cc
volumes:
  database:
    driver: local
  redis:
    driver: local
"""
environment = """
PG_PASS=[[AUTHENTIK_PG_PASS]]
AUTHENTIK_SECRET_KEY= [[AUTHENTIK_SECRET_KEY]]
# SMTP Host Emails are sent to
AUTHENTIK_EMAIL__HOST= mail.smtp2go.com
AUTHENTIK_EMAIL__PORT=8025 
# Optionally authenticate (don't add quotation marks to your password)
AUTHENTIK_EMAIL__USERNAME=d3adc3ii.cc
AUTHENTIK_EMAIL__PASSWORD=taolavodich1234
# Use StartTLS
AUTHENTIK_EMAIL__USE_TLS=true
# Use SSL
AUTHENTIK_EMAIL__USE_SSL=false
AUTHENTIK_EMAIL__TIMEOUT=10
# Email address authentik will send from, should have a correct @domain
AUTHENTIK_EMAIL__FROM=d3tech@pm.me

COMPOSE_PORT_HTTP=8175
COMPOSE_PORT_HTTPS=6443
"""
##

[[stack]]
name = "beszel"
tags = [
  "komodo-1",
  "external",
  "monitoring",
  "beszel"
]
[stack.config]
server = "komodo2"
links = ["https://beszel.d3adc3ii.cc"]
file_contents = """
services:
  beszel:
    image: henrygd/beszel:latest
    container_name: beszel
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 8090:8090
    volumes:
      - ${DOCKER_DATA}/beszel/beszel_data:/beszel_data
      - ${DOCKER_DATA}/beszel/beszel_socket:/beszel_socket
  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host
    volumes:
      - ${DOCKER_DATA}/beszel/beszel_socket:/beszel_socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file:
      - .env
    environment:
      LISTEN: /beszel_socket/beszel.sock
      # Do not remove quotes around the key
      KEY: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG+PtfmPHdKiaE+gbET/6wZeFSnsUEgOXpKM1qJ4gCPp'
"""
environment = """
PGID=1000
PUID=1000
USER_CREATION=true
"""


##

[[repo]]
name = "dIIIhl"
[repo.config]
git_account = "d3hl"
repo = "d3hl/dIIIhl"

##

[[procedure]]
name = "Backup Core Database"
description = "Triggers the Core database backup at the scheduled time."
tags = ["system"]
config.schedule = "Every day at 01:00"

[[procedure.config.stage]]
name = "Stage 1"
enabled = true
executions = [
  { execution.type = "BackupCoreDatabase", execution.params = {}, enabled = true }
]

##

[[procedure]]
name = "Global Auto Update"
description = "Pulls and auto updates Stacks and Deployments using 'poll_for_updates' or 'auto_update'."
tags = ["system"]
config.schedule = "Every day at 03:00"

[[procedure.config.stage]]
name = "Stage 1"
enabled = true
executions = [
  { execution.type = "GlobalAutoUpdate", execution.params = {}, enabled = true }
]

##

[[builder]]
name = "komodo1"
[builder.config]
type = "Server"
params = {}

##

[[resource_sync]]
name = "sync"
[resource_sync.config]
linked_repo = "dIIIhl"
resource_path = ["komodo/resources.toml"]
managed = true