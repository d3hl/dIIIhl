##

[[stack]]
name = "immich"
tags = ["internal", "kmd4"]
[stack.config]
server = "kmd4"
links = ["https://immich.d3adc3ii.cc"]
project_name = "immich"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
file_contents = """
#
# WARNING: To install Immich, follow our guide: https://docs.immich.app/install/docker-compose
#
# Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.

name: immich

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://docs.immich.app/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:fea8b3e67b15729d4bb70589eb03367bab9ad1ee89c876f54327fc7c6e618571
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:41eacbe83eca995561fe43814fd4891e16e39632806253848efaf04d3c8a8b84
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      # DB_STORAGE_TYPE: 'HDD'
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    shm_size: 128mb
    restart: always

volumes:
  model-cache:
"""
environment = """
IMMICH_IGNORE_MOUNT_CHECK_ERRORS=true
PGID=1000
PUID=1000
UPLOAD_LOCATION=/mnt/zApps/immich
DB_DATA_LOCATION=/mnt/cFS/appdata/komodo/stacks/immich/pdata
IMMICH_VERSION=release
DB_PASSWORD=[[IMMICH_DB_PASSWORD]]
POSTGRES_PASSWORD=[[IMMICH_DB_PASSWORD]]
DB_USERNAME: postgres
DB_DATABASE_NAME=immich
"""

##

[[stack]]
name = "learnhouse"
[stack.config]
server = "k-120"
file_contents = """
version: "3.9"
services:
  app:
    build: .
    ports:
      - "80:80"
    volumes:
      - .:/usr/learnhouse
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
  db:
    image: postgres:16-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=learnhouse
      - POSTGRES_PASSWORD=learnhouse
      - POSTGRES_DB=learnhouse
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learnhouse"]
      interval: 5s
      timeout: 4s
      retries: 5
  redis:
    image: redis:7.2.3
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 4s
      retries: 5
  chromadb:
    image: chromadb/chroma:0.5.16
    ports:
      - "8000:8000"
"""
environment = """
# Frontend
NEXT_PUBLIC_LEARNHOUSE_MULTI_ORG=false
NEXT_PUBLIC_LEARNHOUSE_DEFAULT_ORG=default
NEXT_PUBLIC_LEARNHOUSE_TOP_DOMAIN=localhost
NEXTAUTH_SECRET="MyUBh$M)'V$9+}Z0}{)%7}Fz-wH;Rb_T$9hkQK7/$mi/mHC~56<%_c[X0s}-V,s"
NEXTAUTH_URL=http://localhost
# Backend
LEARNHOUSE_COOKIE_DOMAIN=.localhost
LEARNHOUSE_SQL_CONNECTION_STRING=postgresql://learnhouse:learnhouse@db:5432/learnhouse
LEARNHOUSE_REDIS_CONNECTION_STRING=redis://redis:6379/learnhouse
LEARNHOUSE_CHROMADB_HOST=chromadb
"""

##

[[stack]]
name = "netbird"
tags = ["kmd5"]
[stack.config]
server = "kmd5"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
file_contents = """
services:
  netbird:
      container_name: netbird
      hostname: kmd5.nb1
      cap_add:
          - NET_ADMIN
          - SYS_ADMIN
          - SYS_RESOURCE
      network_mode: host
      env_file:
        - .env
      volumes:
          - netbird-client:/var/lib/netbird
      image: netbirdio/netbird:latest
volumes:
  netbird-client:
      name: netbird-client
"""
environment = """
NB_SETUP_KEY=7201DE57-FDAD-4F8A-95BD-B4C4247DA804
"""

##

[[stack]]
name = "newt"
[stack.config]
server = "kmd2"
file_contents = """
services:
  newt:
    image: fosrl/newt
    container_name: newt
    restart: unless-stopped
    environment:
      - PANGOLIN_ENDPOINT=https://pangolin.d3adc3ii.cc
      - NEWT_ID=ie2e2n59kgjtenj
      - NEWT_SECRET=7758kt5q0t48mqc2tenvwt83z1x9czbcqth4pieqk4kravfy
"""

##

[[repo]]
name = "dIIIhl"
[repo.config]
server = "kmd1"
git_provider = "Github.com"
git_account = "d3hl"
repo = "d3hl/dIIIhl"

##

[[procedure]]
name = "Backup Core Database"
description = "Triggers the Core database backup at the scheduled time."
tags = ["system"]
config.schedule = "Every day at 01:00"

[[procedure.config.stage]]
name = "Stage 1"
enabled = true
executions = [
  { execution.type = "BackupCoreDatabase", execution.params = {}, enabled = true }
]

##

[[procedure]]
name = "Global Auto Update"
description = "Pulls and auto updates Stacks and Deployments using 'poll_for_updates' or 'auto_update'."
tags = ["system"]
config.schedule = "Every day at 03:00"

[[procedure.config.stage]]
name = "Stage 1"
enabled = true
executions = [
  { execution.type = "GlobalAutoUpdate", execution.params = {}, enabled = true }
]

##

[[builder]]
name = "kmd1"
[builder.config]
type = "Server"
params = {}

##

[[resource_sync]]
name = "all"
[resource_sync.config]
repo = "d3hl/dIIIhl/"
git_account = "d3hl"
resource_path = ["komodo/all.toml"]
managed = true